import{l as u,z as f,P as h}from"./app-pebjqkCD.js";const i=u({});function k(){const c=u([]),l=f(),o=u({}),a=u(!1),n=h("$swal");return{users:c,user:i,getUsers:async(e=1,t="",s="",r="",d="created_at",p="desc")=>{axios.get("/api/users?page="+e+"&search_id="+t+"&search_title="+s+"&search_global="+r+"&order_column="+d+"&order_direction="+p).then(U=>{c.value=U.data})},getUsersWithTasks:async()=>{axios.get("/api/userswithtasks").then(e=>c.value=e.data)},getUser:async e=>{console.log("Fetching user with ID:",e);const t=await axios.get("/api/user/"+e);i.value=t.data.data,console.log("Data from API:",i.value)},createUserDB:async e=>axios.put("/api/users/db/create/"+e),deleteUserDB:async e=>axios.put("/api/users/db/delete/"+e),changeUserPasswordDB:async e=>axios.put("/api/users/db/password/"+e),createUserProceduredDB:async e=>axios.put("/api/users/db/procedure/"+e),storeUser:async e=>{if(a.value)return;a.value=!0,o.value={};let t=new FormData;for(let s in e)e.hasOwnProperty(s)&&t.append(s,e[s]);axios.post("/api/users",t).then(s=>{l.push({name:"users.index"}),n({icon:"success",title:"User saved successfully"})}).catch(s=>{var r;(r=s.response)!=null&&r.data&&(o.value=s.response.data.errors)}).finally(()=>a.value=!1)},updateUser:async(e,t)=>{a.value||(a.value=!0,o.value={},await axios.put("/api/users/"+e[0].id,e,t).then(s=>{console.log("User updated successfully",s.data.data),n({icon:"success",title:"User updated successfully"})}).catch(s=>{var r;(r=s.response)!=null&&r.data&&(o.value=s.response.data.errors)}).finally(()=>a.value=!1))},deleteUser:async(e,t)=>{n({title:"Are you sure?",text:"You won't be able to revert this action!",icon:"warning",showCancelButton:!0,confirmButtonText:"Yes, delete it!",confirmButtonColor:"#ef4444",timer:2e4,timerProgressBar:!0,reverseButtons:!0}).then(s=>{s.isConfirmed&&axios.delete("/api/users/"+e).then(r=>{c.value.data.splice(t,1),n({icon:"success",title:"User deleted successfully"})}).catch(r=>{n({icon:"error",title:"Something went wrong"})})})},validationErrors:o,isLoading:a}}export{k as u};
