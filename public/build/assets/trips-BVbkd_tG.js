import{l,J as M,Q as s,P as W}from"./app-pebjqkCD.js";import{e as X}from"./yup-locales.esm-DRsOkZ6u.js";import{s as Y,c as Z,d as g,b as y,f as I}from"./index.esm-C_1aiQ0x.js";function ie(){const c=l([]),f=l({user_id:0,vehicle_id:0,start_point:null,end_point:null,available_seats:null,price:null,departure_time:null,arrival_time:null,drive_start:null,drive_end:null}),w=l([]),_=l([]),T=l([]),D=l([]),d=M(),t=l(!1),n=l([]),x=l([]),m=l([]),h=l([]),i=W("$swal");Y(X);const u=l([]),p=l([]),E={address:"",locality:"",location:{latitude:0,longitude:0}},b={address:"",locality:"",location:{latitude:0,longitude:0}},P=Z().shape({user_id:y().integer("El User ID debe ser un número entero").required("El User ID es obligatorio"),vehicle_id:y().integer("El Vehicle ID debe ser un número entero").required("El Vehicle ID es obligatorio"),start_point:I().default(E).nullable(!0),end_point:I().default(b).nullable(!0),departure_time:g().required("La hora de salida es obligatoria"),arrival_time:g().required("La hora de llegada es obligatoria"),available_seats:y().integer("Debe ser un número entero").min(1,"Debe haber al menos un asiento disponible").required("El número de asientos es obligatorio"),price:y().typeError("El precio debe ser un número válido").positive("El precio debe ser mayor que 0").nullable(!1).required("El precio es obligatorio"),drive_start:g().nullable(!0),drive_end:g().nullable(!0)}),A=async e=>{try{const a=await s.post("/api/trip",e);i({icon:"success",title:"Viaje registrado con éxito"})}catch(a){console.error("Error en la solicitud POST:",a),i({icon:"error",title:"No se ha podido registrar la publicación"})}};async function N(){if(!(t.value||c.value.length>0)){t.value=!0;try{const e=await s.get("/api/trip");console.log("API Response:",e.data),c.value=e.data.data,console.log("Trips cargados:",c.value)}catch(e){console.error("Error fetching trips:",e),d.add({severity:"error",summary:"Error",detail:"No se pudieron cargar los viajes",life:3e3})}finally{t.value=!1}}}async function V(e){if(!(t.value||f.value.length>0)){t.value=!0;try{console.log("Cargando trip con ID:",e);const a=await s.get("/api/trip/"+e);f.value=a.data.data,console.log("Trip con ID cargado:",f.value)}catch(a){console.error("Error fetching trips:",a),d.add({severity:"error",summary:"Error",detail:"No se pudieron cargar los viajes",life:3e3})}finally{t.value=!1}}}const R=async e=>{try{console.log("searchparams",e);const a=await s.get("/api/trips/search",{params:e});console.log("API response: ",a.data.data),T.value=a.data.data}catch(a){console.error("Search error:",a)}},L=async e=>{var a;if(!t.value){t.value=!0,n.value={};try{const r=await s.put("/api/trip/"+e.id,e);console.log("API response, Trip actualizado: ",r.data.message);const o=c.value.findIndex(v=>v.id===e.id);o!==-1&&(c.value[o]=e),d.add({severity:"success",summary:"Éxito",detail:"Viaje actualizado correctamente",life:3e3})}catch(r){(a=r.response)!=null&&a.data&&(n.value=r.response.data.errors),d.add({severity:"error",summary:"Error",detail:"No se pudo actualizar el viaje",life:3e3})}finally{t.value=!1}}},z=async e=>{var a;if(!t.value){t.value=!0,n.value={};try{const r=await s.put("/api/admin/trip/"+e.value.id,e.value);console.log("API response, Trip actualizado: ",r.data.message);const o=c.value.findIndex(v=>v.id===e.id);o!==-1&&(c.value[o]=e),d.add({severity:"success",summary:"Éxito",detail:"Viaje actualizado correctamente",life:3e3})}catch(r){(a=r.response)!=null&&a.data&&(n.value=r.response.data.errors),d.add({severity:"error",summary:"Error",detail:"No se pudo actualizar el viaje",life:3e3})}finally{t.value=!1}}},$=async()=>{const e=await s.get("/api/app/driver-active-trip");if(e.data.data)for(const r of e.data.data)u.value.push(r);const a=await s.get("/api/app/passenger-active-trip");if(a.data.data)for(const r of a.data.data)p.value.push(r)},q=async e=>{try{const a=await s.put(`/api/app/start-drive/${e}`);console.log("API: ",a.data),i({icon:"success",title:"Viaje iniciado"});const r=u.value.findIndex(o=>o.id==e);u.value[r].drive_start=a.data.data.drive_start}catch(a){i({icon:"error",title:"No se ha podido iniciar el viaje",text:a.response.data.data}),console.log("error",a)}},S=async e=>{try{const a=await s.put(`/api/app/end-drive/${e}`);if(a.data.success==!0){i({icon:"success",title:"Viaje finalizado"});const r=u.value.findIndex(o=>o.id==e);u.value[r].drive_end=a.data.data.drive_end}else i({icon:"error",title:"No se ha podido finalizar el viaje"})}catch{i({icon:"error",title:"Error inesperado en el servidor"})}},k=async e=>{s.put("/api/app/check-in",e).then(a=>{console.log("API response: ",e),i({icon:"success",title:"Check-in realizado"});const r=p.value.findIndex(o=>o.id==e.id);p.value[r]=a.data.data}).catch(a=>{console.log(a),i({icon:"error",title:"No se ha podido registrar la acción.",text:a.response.data.data})})},H=async e=>{try{const a=await s.put(`/api/app/cancel-driver-trip/${e}`);if(a.data.success==!0){i({icon:"success",title:"Viaje cancelado"});const r=u.value.findIndex(o=>o.id==e);u.value[r].cancelled_at=a.data.data.cancelled_at}else i({icon:"error",title:"No se ha podido cancelar el viaje"})}catch{i({icon:"error",title:"Error inesperado en el servidor"})}};function j(e){return e?new Date(e).toISOString().replace("T"," ").slice(0,19):null}const C=async e=>{t.value||(t.value=!0,n.value={},e.value.departure_time=j(e.value.departure_time),e.value.arrival_time=j(e.value.arrival_time),e.value.start_point===null&&(e.value.start_point=E),e.value.end_point===null&&(e.value.end_point=b),s.post("/api/trip/",e.value).then(a=>{console.log("Respuesta API creando viaje",a.data.message),i({icon:"success",title:"Viaje creado correctamente",text:a.data.message})}).catch(a=>{var r;(r=a.response)!=null&&r.data&&(n.value=a.response.data.errors)}).finally(()=>t.value=!1))},O=async e=>{if(!t.value){t.value=!0;try{await s.delete("/api/trip/"+e.id),c.value=c.value.find(a=>a.id!==e.id),d.add({severity:"success",summary:"Éxito",detail:"Viaje eliminado correctamente",life:3e3})}catch(a){console.error("Error deleting trip:",a),d.add({severity:"error",summary:"Error",detail:"No se pudo eliminar el viaje",life:3e3})}finally{t.value=!1}}},U=async e=>{try{const a=await s.post("/api/trip/reserve/"+e.value.trip_id,e.value);console.log("API response, Trip reservado: "+a.data.data),i({icon:"success",title:"Reserva creada correctamente",text:a.data.message})}catch(a){console.log("Error updating: ",a)}},J=async e=>{try{const a=await s.put(`/api/app/cancel-passenger-trip/${e}`);if(a.data.success==!0){i({icon:"success",title:"Viaje cancelado"});const r=p.value.findIndex(o=>o.id==e);p.value[r].cancelled_at=a.data.data.pivot.cancelled_at}else i({icon:"error",title:"No se ha podido cancelar el viaje"})}catch{i({icon:"error",title:"Error inesperado en el servidor"})}},Q=()=>{t.value||(t.value=!0,n.value={},s.get("/api/reserva/").then(e=>{console.log("API response: ",e.data)}).catch(e=>{var a;(a=e.response)!=null&&a.data&&(n.value=e.response.data.errors,console.log(n.value))}).finally(()=>t.value=!1))},B=async()=>{s.get("/api/app/driver-history").then(e=>{const a=e.data.data;for(const r of a)x.value.push(r)})},F=async()=>s.get("/api/app/passenger-history").then(e=>{const a=e.data.data;for(const r of a)m.value.push(r);return G(m.value),h.value.length>0}),G=e=>{for(const a of e)a.rates.length==0&&h.value.push(a)};return{trip:f,tripsList:c,tripList:w,searchTripList:T,TripSchema:P,tags:_,getTagTrips:async e=>{t.value||(t.value=!0,n.value={},await s.get("/api/tags/"+e).then(a=>{console.log("Respuesta API recogiendo todas las etiquetas: ",a.data.data),_.value=a.data.data}).catch(a=>{var r;(r=a.response)!=null&&r.data&&(n.value=a.response.data.errors,console.log(n.value))}).finally(()=>t.value=!1))},getTrips:N,getReserves:Q,reservesList:D,getTrip:V,updateTrip:L,deleteTrip:O,makeCheckIn:k,getDriverHistory:B,getPassengerHistory:F,driverHistory:x,passengerHistory:m,reservedTrip:U,searchTrip:R,validationErrors:n,getActiveTrips:$,activeDriverTripsList:u,startDrive:q,endDrive:S,activePassengerTripsList:p,cancellTripAsDriver:H,cancellTripAsPassenger:J,createTrip:C,postTrips:A,rateTrip:async(e,a,r)=>{s.post("/api/rates",{user_id:e.user.id,trip_id:e.pivot.trip_id,rate:e.rate}).then(o=>{const v=a.value.findIndex(K=>K.id==e.id);v!==-1&&(a.value.splice(v,1),r("update:tripsToRate",a.value)),i({icon:"success",title:"Valoración registrada con éxito"})}).catch(o=>{i({icon:"error",title:"No se ha podido registrar la valoración",text:o.response.data.message}),console.log("ERROR",o)})},tripsToRate:h,updateTripAdmin:z}}export{ie as u};
